generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MembershipStatus {
  PENDING
  ACTIVE
  INACTIVE
  SUSPENDED
  EXPIRED
  CANCELLED
  REJECTED
  INITIAL_REVIEW
  BACKGROUND_CHECK
  FINAL_DECISION
  FLAGGED

  @@map("membership_status")
}

enum NotificationType {
  APPLICATION_SUBMITTED
  APPLICATION_APPROVED
  APPLICATION_REJECTED
  NEW_MEMBER
  SYSTEM_ALERT
  PARLEY_REQUEST
  PARLEY_CONFIRMED
  PARLEY_CANCELLED
  PARLEY_COMPLETED
  ANCHOR_REPORTED
  ANCHOR_VERIFIED
  ANCHOR_DISPUTED
}

enum EventStatus {
  DRAFT
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
  POSTPONED
}

enum RendezvousStatus {
  ACTIVE
  REMOVED
  CANCELLED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                         String             @id @default(cuid())
  createdAt                  DateTime           @default(now())
  updatedAt                  DateTime           @updatedAt
  name                       String
  email                      String             @unique
  phone                      String?
  company                    String
  chapterId                  String
  emailVerified              DateTime?
  expiresAt                  DateTime?
  image                      String?
  interests                  String[]
  isActive                   Boolean            @default(true)
  isPublic                   Boolean            @default(true)
  joinedAt                   DateTime?
  lastLoginAt                DateTime?
  membershipStatus           MembershipStatus   @default(PENDING)
  profileImage               String?
  profileImageFilename       String?
  role                       String
  location                   String?            @default("")
  tempId                     String             @default("")
  isAdmin                    Boolean            @default(false)
  isSuperUser                Boolean            @default(false)
  bio                        String?            @default("")
  businessLicenseNumber      String?            @default("")
  isLicensed                 Boolean?           @default(false)
  industry                   String             @default("")
  title                      String?            @default("")
  website                    String?            @default("")
  yearsInBusiness            String?            @default("")
  hasCompletedApplication    Boolean            @default(false)
  rejectedAt                 String?            @default("")
  rejectionReason            String?            @default("")
  backgroundCheckCompletedAt String?            @default("")
  finalDecisionAt            String?            @default("")
  initialReviewCompletedAt   String?            @default("")
  rejectedStep               String?            @default("")
  isBackgroudCheckCompleted  Boolean            @default(false)
  isInitialReviewCompleted   Boolean            @default(false)
  signals                    Json?              @default("[]")
  isFinalDecisionMade        Boolean            @default(false)
  isRejected                 Boolean            @default(false)
  askMeAbout                 Json?
  careerAchievements         Json?
  collage                    Json?
  coverImage                 String?
  coverImageFilename         String?
  facebookUrl                String?
  goal                       String?
  learningGoals              String[]
  linkedInUrl                String?
  podcasts                   Json?
  portfolioUrl               String?
  posts                      Json?
  professionalAssociations   Json?
  professionalBooks          Json?
  servicesOffered            Json?
  sideProjects               Json?
  skills                     String[]
  threadsUrl                 String?
  xUrl                       String?
  youtubeUrl                 String?
  weeklyTreasureWishlist     String?
  accounts                   Account[]
  givenCredits               Anchor[]           @relation("AnchorGiver")
  receivedCredits            Anchor[]           @relation("AnchorReceiver")
  logs                       Log[]
  sentNotifications          Notification[]     @relation("SentNotifications")
  notificationsRead          NotificationRead[]
  receivedMeetings           Parley[]           @relation("ParleyRecipient")
  requestedMeetings          Parley[]           @relation("ParleyRequester")
  sessions                   Session[]
  giver                      TreasureMap[]      @relation("TreasureMapGiver")
  receiver                   TreasureMap[]      @relation("TreasureMapReceiver")
  chapter                    Chapter            @relation(fields: [chapterId], references: [id])
}

model Parley {
  id               String    @id @default(cuid())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  scheduledAt      DateTime
  duration         Int       @default(30)
  location         String?
  meetingType      String    @default("DECK_TO_DECK")
  requesterId      String
  recipientId      String
  status           String    @default("REQUESTED")
  completed        Boolean   @default(false)
  completedAt      DateTime?
  referralGiven    Boolean   @default(false)
  referralReceived Boolean   @default(false)
  followUpRequired Boolean   @default(false)
  notes            String?
  requesterNotes   String?
  recipientNotes   String?
  chapterId        String?
  chapter          Chapter?  @relation(fields: [chapterId], references: [id])
  recipient        User      @relation("ParleyRecipient", fields: [recipientId], references: [id])
  requester        User      @relation("ParleyRequester", fields: [requesterId], references: [id])

  @@unique([requesterId, recipientId, scheduledAt])
  @@index([chapterId])
  @@index([scheduledAt])
  @@index([status])
}

model Anchor {
  id                      String    @id @default(cuid())
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  giverId                 String?
  receiverId              String?
  businessValue           Decimal   @db.Decimal(10, 2)
  currency                String    @default("USD")
  description             String
  clientName              String?
  closedDate              DateTime
  chapterId               String
  announcedAt             DateTime?
  meetingId               String?
  status                  String    @default("REPORTED")
  notes                   String?
  externalGiverCompany    String?
  externalGiverEmail      String?
  externalGiverName       String?
  externalReceiverCompany String?
  externalReceiverEmail   String?
  externalReceiverName    String?
  chapter                 Chapter   @relation(fields: [chapterId], references: [id])
  giver                   User?     @relation("AnchorGiver", fields: [giverId], references: [id])
  receiver                User?     @relation("AnchorReceiver", fields: [receiverId], references: [id])

  @@index([chapterId])
  @@index([giverId])
  @@index([receiverId])
  @@index([closedDate])
  @@index([announcedAt])
}

model Chapter {
  id                String         @id @default(cuid())
  name              String
  location          String
  meetingDay        String
  meetingTime       String
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  meetingFrequency  String         @default("WEEKLY")
  hasUnlockedBooty  Boolean        @default(false)
  hasUnlockedGrog   Boolean        @default(false)
  hasUnlockedMuster Boolean        @default(false)
  anchors           Anchor[]
  grogs             Grog[]
  notifications     Notification[]
  parleys           Parley[]
  rendezvous        Rendezvous[]
  treasureMaps      TreasureMap[]
  users             User[]
}

model Newsletter {
  id                       String   @id @default(cuid())
  firstName                String   @db.VarChar(255)
  lastName                 String   @db.VarChar(255)
  email                    String   @unique @db.VarChar(255)
  agreedToPrivacyStatement Boolean  @default(false)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
}

model Log {
  id        String   @id @default(cuid())
  level     String
  message   String
  metadata  Json?
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
}

model Notification {
  id         String             @id @default(cuid())
  title      String
  message    String
  type       NotificationType
  isRead     Boolean            @default(false)
  entityId   String?
  entityType String?
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  chapterId  String
  senderId   String
  chapter    Chapter            @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  sender     User               @relation("SentNotifications", fields: [senderId], references: [id])
  readBy     NotificationRead[]
}

model NotificationRead {
  id             String       @id @default(cuid())
  notificationId String
  userId         String
  readAt         DateTime     @default(now())
  isRead         Boolean      @default(false)
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([notificationId, userId])
}

model TreasureMap {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  giverId       String
  receiverId    String
  clientName    String
  clientEmail   String?
  clientPhone   String?
  serviceNeeded String
  status        String    @default("GIVEN")
  contactedAt   DateTime?
  closedAt      DateTime?
  notes         String?
  giverNotes    String?
  receiverNotes String?
  chapterId     String
  isThirdParty  Boolean   @default(false)
  chapter       Chapter   @relation(fields: [chapterId], references: [id])
  giver         User      @relation("TreasureMapGiver", fields: [giverId], references: [id])
  receiver      User      @relation("TreasureMapReceiver", fields: [receiverId], references: [id])

  @@index([chapterId])
  @@index([giverId])
  @@index([receiverId])
  @@index([status])
  @@index([createdAt])
}

model Grog {
  id                   String      @id @default(cuid())
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  title                String
  description          String?
  category             String
  type                 String
  cost                 String?
  dresscode            String?
  date                 DateTime
  time                 String
  duration             String
  location             String
  maxAttendees         Int?
  attendees            Int?
  status               EventStatus @default(UPCOMING)
  featured             Boolean     @default(false)
  host                 String?
  requirements         String?
  materials            String?
  registrationUrl      String?
  meetingUrl           String?
  viewCount            Int         @default(0)
  clickCount           Int         @default(0)
  chapterId            String
  isPublic             Boolean     @default(true)
  requiresRSVP         Boolean     @default(false)
  registrationDeadline DateTime    @default(now())
  chapter              Chapter     @relation(fields: [chapterId], references: [id])
}

model Rendezvous {
  id                String           @id @default(cuid())
  title             String
  description       String?
  type              String
  startTime         DateTime
  endTime           DateTime
  isRecurring       Boolean          @default(false)
  recurrencePattern String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  chapterId         String
  status            RendezvousStatus @default(ACTIVE)
  chapter           Chapter          @relation(fields: [chapterId], references: [id])
}
