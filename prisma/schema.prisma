// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MembershipStatus {
  PENDING // Awaiting approval/payment
  INITIAL_REVIEW
  BACKGROUND_CHECK
  FINAL_DECISION
  ACTIVE // Active member
  INACTIVE // Temporarily inactive
  SUSPENDED // Suspended by admin
  EXPIRED // Membership expired
  CANCELLED // Cancelled by member
  REJECTED

  @@map("membership_status")
}

enum NotificationType {
  APPLICATION_SUBMITTED
  APPLICATION_APPROVED
  APPLICATION_REJECTED
  NEW_MEMBER
  SYSTEM_ALERT
  PARLEY_REQUEST
  PARLEY_CONFIRMED
  PARLEY_CANCELLED
  PARLEY_COMPLETED
  ANCHOR_REPORTED
  ANCHOR_VERIFIED
  ANCHOR_DISPUTED
}

enum EventStatus {
  DRAFT
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
  POSTPONED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id        String   @id @default(cuid())
  tempId    String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Basic info
  name                  String
  role                  String
  email                 String  @unique
  phone                 String?
  company               String
  location              String  @default("")
  yearsInBusiness       String  @default("")
  industry              String  @default("")
  title                 String  @default("")
  bio                   String? @default("")
  website               String? @default("")
  isLicensed            Boolean @default(false)
  businessLicenseNumber String  @default("")
  isAdmin               Boolean @default(false)
  isSuperUser           Boolean @default(false)

  // Core membership
  chapterId                  String
  chapter                    Chapter          @relation(fields: [chapterId], references: [id])
  joinedAt                   DateTime?
  expiresAt                  DateTime?
  membershipStatus           MembershipStatus @default(PENDING)
  hasCompletedApplication    Boolean          @default(false)
  rejectedAt                 String?          @default("")
  rejectedStep               String?          @default("") // 'INITIAL_REVIEW', 'BACKGROUND_CHECK', 'FINAL_DECISION'
  rejectionReason            String?          @default("") // Optional: why they were rejected
  initialReviewCompletedAt   String?          @default("")
  backgroundCheckCompletedAt String?          @default("")
  finalDecisionAt            String?          @default("")
  isInitialReviewCompleted   Boolean          @default(false)
  isBackgroudCheckCompleted  Boolean          @default(false)
  isFinalDecisionMade        Boolean          @default(false)
  isRejected                 Boolean          @default(false)
  signals                    Json?            @default("[]")
  addedBy                    String?          @default("")

  // Profile & Networking
  interests            String[] // Array of interest categories
  profileImage         String? // URL to profile image
  profileImageFilename String?
  isPublic             Boolean  @default(true)
  isActive             Boolean  @default(true)

  // Verification & Security
  lastLoginAt DateTime?

  // NextAuth fields
  emailVerified DateTime? // Add for NextAuth
  image         String?

  // Parley relationships
  requestedMeetings Parley[] @relation("ParleyRequester")
  receivedMeetings  Parley[] @relation("ParleyRecipient")

  // Anchor relationships
  givenCredits    Anchor[] @relation("AnchorGiver")
  receivedCredits Anchor[] @relation("AnchorReceiver")

  // TreasureMap relationships
  giver    TreasureMap[] @relation("TreasureMapGiver")
  receiver TreasureMap[] @relation("TreasureMapReceiver")

  accounts Account[]
  sessions Session[]

  logs Log[]

  notificationsRead NotificationRead[]
  sentNotifications Notification[]     @relation("SentNotifications")
}

model Parley {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Meeting details
  scheduledAt DateTime
  duration    Int      @default(30) // minutes
  location    String? // optional meeting location
  meetingType String   @default("DECK_TO_DECK") // DECK_TO_DECK, VOYAGE_CALL, MESSAGE_IN_A_BOTTLE, LANTERN_LIGHT

  // Participants (exactly 2 Coastal Referral Exchange users)
  requesterId String
  requester   User   @relation("ParleyRequester", fields: [requesterId], references: [id])

  recipientId String
  recipient   User   @relation("ParleyRecipient", fields: [recipientId], references: [id])

  // Status tracking
  status String @default("REQUESTED") // REQUESTED, CONFIRMED, COMPLETED, CANCELLED

  // Meeting outcomes (filled after completion)
  completed        Boolean   @default(false)
  completedAt      DateTime?
  referralGiven    Boolean   @default(false)
  referralReceived Boolean   @default(false)
  followUpRequired Boolean   @default(false)

  // Notes
  notes          String? // general meeting notes
  requesterNotes String? // private notes for requester
  recipientNotes String? // private notes for recipient

  // Coastal Referral Exchange specific tracking
  chapterId String?
  chapter   Chapter? @relation(fields: [chapterId], references: [id])

  @@unique([requesterId, recipientId, scheduledAt]) // prevent duplicate meetings
  @@index([chapterId])
  @@index([scheduledAt])
  @@index([status])
}

model Anchor {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Who is giving the thank you
  giverId String
  giver   User   @relation("AnchorGiver", fields: [giverId], references: [id])

  // Who is receiving the thank you (who provided the referral)
  receiverId String
  receiver   User   @relation("AnchorReceiver", fields: [receiverId], references: [id])

  // Business details
  businessValue Decimal @db.Decimal(10, 2) // monetary value of closed business
  currency      String  @default("USD")
  description   String // description of the business/service
  clientName    String? // name of the client (optional)

  // When the business was closed
  closedDate DateTime

  // Coastal Referral Exchange tracking
  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id])

  // Meeting context (if announced during a chapter meeting)
  announcedAt DateTime? // when this was announced to the chapter
  meetingId   String? // reference to chapter meeting if applicable

  // Status
  status String @default("REPORTED") // REPORTED, VERIFIED, DISPUTED

  // Notes
  notes String? // additional details about the closed business

  @@index([chapterId])
  @@index([giverId])
  @@index([receiverId])
  @@index([closedDate])
  @@index([announcedAt])
}

model Chapter {
  id String @id @default(cuid())

  name             String
  location         String
  meetingDay       String // e.g., "TUESDAY"
  meetingTime      String // e.g., "07:30"
  meetingFrequency String @default("WEEKLY") // e.g., "WEEKLY"

  // Relationships
  users         User[]
  parleys       Parley[]
  anchors       Anchor[]
  treasureMaps  TreasureMap[]
  notifications Notification[]
  grogs         Grog[]

  hasUnlockedMuster Boolean @default(false)
  hasUnlockedBooty  Boolean @default(false)
  hasUnlockedGrog   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Newsletter {
  id                       String  @id @default(cuid())
  firstName                String  @db.VarChar(255)
  lastName                 String  @db.VarChar(255)
  email                    String  @unique @db.VarChar(255)
  agreedToPrivacyStatement Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Log {
  id       String @id @default(cuid())
  level    String // e.g., 'info', 'error', 'debug'
  message  String
  metadata Json? // Optional, store additional context

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id         String           @id @default(cuid())
  title      String
  message    String
  type       NotificationType
  isRead     Boolean          @default(false)
  chapterId  String
  entityId   String? // ID of the explorer application, etc.
  entityType String? // "application", "member", etc.

  readBy  NotificationRead[] // Relation to junction table
  chapter Chapter            @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  senderId String
  sender   User   @relation("SentNotifications", fields: [senderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Junction table to track which admins have read which notifications
model NotificationRead {
  id             String   @id @default(cuid())
  notificationId String
  userId         String
  isRead         Boolean  @default(false)
  readAt         DateTime @default(now())

  notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([notificationId, userId])
}

model TreasureMap {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Who is giving the referral
  giverId String
  giver   User   @relation("TreasureMapGiver", fields: [giverId], references: [id])

  // Who is receiving the referral  
  receiverId String
  receiver   User   @relation("TreasureMapReceiver", fields: [receiverId], references: [id])

  // Referral details
  clientName    String // Name of the client being referred
  clientEmail   String? // Optional client contact
  clientPhone   String? // Optional client contact
  serviceNeeded String // What service/product the client needs

  // Status tracking
  status String @default("GIVEN") // GIVEN, ACCEPTED, CONTACTED, CLOSED, DECLINED

  // Follow-up tracking
  contactedAt DateTime? // When receiver contacted the client
  closedAt    DateTime? // When business was closed

  isThirdParty Boolean @default(false)

  // Notes
  notes         String? // General notes about the referral
  giverNotes    String? // Private notes for giver
  receiverNotes String? // Private notes for receiver

  // Coastal Referral Exchange tracking
  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id])

  @@index([chapterId])
  @@index([giverId])
  @@index([receiverId])
  @@index([status])
  @@index([createdAt])
}

model Grog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Basic Event Information
  title       String
  description String? @db.Text
  category    String // "Weekly Meeting", "Special Event", "Education", "Chamber Event"
  type        String // "networking", "workshop", "mixer", "luncheon"
  cost        String?
  dresscode   String?

  // Date and Time
  date                 DateTime
  registrationDeadline DateTime @default(now())
  time                 String // "07:00 AM"
  duration             String // "90 minutes"

  // Location
  location String

  // Capacity and Registration
  maxAttendees Int?
  attendees    Int?

  // Status and Visibility
  status   EventStatus @default(UPCOMING)
  featured Boolean     @default(false)

  // Host Information
  host String?

  requirements String?
  materials    String?
  requiresRSVP Boolean @default(false)
  isPublic     Boolean @default(true)

  // External Links
  registrationUrl String?
  meetingUrl      String? // For virtual events

  // Analytics
  viewCount  Int @default(0)
  clickCount Int @default(0)

  // Coastal Referral Exchange tracking
  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id])
}
